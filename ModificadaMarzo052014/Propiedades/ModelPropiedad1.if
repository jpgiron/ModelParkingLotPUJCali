
system ParkingSystem;
type RTDS_character = range 32..127;
type RTDS_charstring = string[128] of RTDS_character;
const cNUMMAXCTRL = 5;

const cMAX_ZONES = 5;

const CNUMMAXZONES_SYSTEM = 25;

type i_spots = integer;

type InfoZone = record
  totalSpots integer;
  freeSpots integer;
  ID pid;
endrecord;
type infoMainCtrls = record
  totalSpotsZone integer;
  freeSpotsZone integer;
endrecord;
type InfoCtrl = record
  alltotalSpots integer;
  allfreeSpots integer;
  IDCtrl pid;
  listZones table_Zones;
  tableConnectionOkZones tableVeriFyCon_Zone;
endrecord;
type InfoMainSystem = record
  totalSpotsSystem integer;
  freeSpotsSystem integer;
  tableInfoCtrl tableMainInfoCtrls;
endrecord;
type itIndex = range 0 .. 4;

type itIndext_Ctrl = range 0 .. 4;

type table_Zones = array[4] of InfoZone;

type tableInfoGralCtrl = array[4] of InfoCtrl;

type tableMainInfoCtrls = array[4] of infoMainCtrls;

type tableVeriFyCon_Zone = array[4] of boolean;

type tableVerifyCon_Ctrl = array[4] of boolean;

signal sCreateZone(pid, i_spots, i_spots);
signal sIamZone(pid, InfoZone);
signal sCreateZone(pid, i_spots, i_spots);
signal sInfoSystem(pid, InfoMainSystem);
signal sOkCreateZoneManager(pid, pid);
signal sCreateZone(pid, i_spots, i_spots, pid);
signal sReqInfoCtrl(pid);
signal sCreateZone_(pid, i_spots, i_spots);
signal sInfoTotalCtrl(pid, InfoCtrl);
signal sExcLimitZones(pid);
signal sCannotGetInfoZones(pid);
signal sOkCreation(pid, InfoZone);
signal sExcQuantityZones(pid);
signal sEntered_Car(pid, InfoZone);
signal sOut_Car(pid, InfoZone);
signal sOkInit(pid, InfoZone);
signal sInfoZone(pid, InfoZone);
signal sInitFreeSpot(pid, i_spots);
signal sInitTotalSpots(pid, i_spots);
signal sReqInfo(pid);
signal sIR1_Zone(pid);
signal sIR2_Zone(pid);
signal sIR3_Zone(pid);
signal sIR4_Zone(pid);
signal sLoopInductive_Zone(pid);
signal sOkCreation(pid, InfoZone);
signal sExcQuantityZones(pid);
signal sCreateCtrlZone(pid);
signal sReqInfoCtrlZone(pid);
signal sExcLimitCtrl(pid);
signal sImpossibleGetInfoCtrls(pid);
signal sOkCreationCtrl(pid, InfoCtrl);
signal sOkCreationCtrl_i(pid, InfoCtrl);
signal sExcQuantityCtrl(pid);
signal sCreateCtrl(pid);
signal sOkCreateCtrl(pid);
signal sIamCtrl(pid, InfoCtrl);
signal sAddZone(pid, itIndext_Ctrl, i_spots, i_spots);
signal sExcQuantityCtrl(pid);
signal sOkCreationZone(pid);
signal sInitialConnection(pid);
signal sSetUpFreeSpot(pid, itIndext_Ctrl, itIndex, i_spots);
signal sSetUpTotalSpot(pid, itIndext_Ctrl, itIndex, i_spots);
signal sConfirmZoneManager(pid, pid);
signal sConfirmZoneManager_i(pid, pid);
signal sCreateZoneManager(pid, pid);
signal sExcZoneManager(pid);
signal sIamZoneManager(pid, pid);
signal sOkInitPid(pid);
signal sInitPidCtrl(pid, pid);
signal sOkCreateZone(pid, InfoCtrl);
signal sConfirmCtrl(pid);
signal sOkSetUp(pid);
signal sInitFreeSpotZone(pid, itIndex, i_spots);
signal sInitTotalSpotZone(pid, itIndex, i_spots);
signal sOutCar(pid, itIndext_Ctrl, itIndex);
signal sEntryCar(pid, itIndext_Ctrl, itIndex);

signal RTDS_Inparam_proc_FindIndexPIDZone(pid, pid, table_Zones, integer);
signal RTDS_Outparam_proc_FindIndexPIDZone(pid, integer);

signalroute ENV_C_cMain_CtrlManager_M_sCreateCtrl_P_pCtrlManager(1) #fifo
from env
to pCtrlManager
with sCreateCtrl;

signalroute ENV_C_cMain_CtrlZone_M_sInitTotalSpotZone_P_pCtrl(1) #fifo
from env
to pCtrl
with sInitTotalSpotZone;

signalroute ENV_C_cMain_CtrlZone_M_sReqInfoCtrl_P_pCtrl(1) #fifo
from env
to pCtrl
with sReqInfoCtrl;

signalroute ENV_C_cMain_CtrlZone_M_sInitFreeSpotZone_P_pCtrl(1) #fifo
from env
to pCtrl
with sInitFreeSpotZone;

signalroute ENV_C_cMain_CtrlZone_M_sInitTotalSpots_P_pCtrl(1) #fifo
from env
to pCtrl
with sInitTotalSpots;

signalroute ENV_C_cMain_CtrlZone_M_sInitFreeSpots_P_pCtrl(1) #fifo
from env
to pCtrl
with sInitFreeSpots;

signalroute ENV_C_cMain_CtrlZone_M_sCreateZone__P_pCtrl(1) #fifo
from env
to pCtrl
with sCreateZone_;

signalroute ENV_C_cMain_CtrlZone_M_sInitialConnection_P_pCtrl(1) #fifo
from env
to pCtrl
with sInitialConnection;

signalroute ENV_C_cEnv_Zone_M_sIR3_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR3_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR3_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR3_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR2_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR2_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR2_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR2_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR4_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR4_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR4_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR4_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR1_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR1_Zone;

signalroute ENV_C_cEnv_Zone_M_sIR1_Zone_P_pZone(1) #fifo
from env
to pZone
with sIR1_Zone;

signalroute ENV_C_cEnv_Zone_M_sLoopInductive_Zone_P_pZone(1) #fifo
from env
to pZone
with sLoopInductive_Zone;

signalroute ENV_C_cEnv_Zone_M_sLoopInductive_Zone_P_pZone(1) #fifo
from env
to pZone
with sLoopInductive_Zone;

/*
==========
Messages name and corresponding channel received by the environment
channel cEnv_Zone : 
channel cMain_CtrlZone : sInfoTotalCtrl sOkCreateZone sExcZoneManager sExcLimitZones sOkCreationCtrl_i sOkSetUp sCannotGetInfoZones
channel cMain_CtrlManager : sOkCreationCtrl sExcQuantityCtrl
==========;
*/

signalroute P_pCreatorZoneManager_C_cCreator_ZoneManager_M_sCreateZone(1) #fifo #reliable #unicast #urgent
from pCreatorZoneManager
to pZoneManager
with sCreateZone;

signalroute P_pCreatorZoneManager_C_cCreator_ZoneManager_M_sConfirmZoneManager(1) #fifo #reliable #unicast #urgent
from pCreatorZoneManager
to pZoneManager
with sConfirmZoneManager;

signalroute P_pCreatorZoneManager_C_cCtrl_CreatorZoneManager_M_sOkCreateZoneManager(1) #fifo #reliable #unicast #urgent
from pCreatorZoneManager
to pCtrl
with sOkCreateZoneManager;

signalroute P_pCreatorZoneManager_C_cCtrl_CreatorZoneManager_M_sExcZoneManager(1) #fifo #reliable #unicast #urgent
from pCreatorZoneManager
to pCtrl
with sExcZoneManager;

signalroute P_pZone_C_cZone_Manager_M_sInfoZone(1) #fifo #reliable #unicast #urgent
from pZone
to pZoneManager
with sInfoZone;

signalroute P_pZone_C_cCtrl_Zone_M_sInfoZone(1) #fifo #reliable #unicast #urgent
from pZone
to pCtrl
with sInfoZone;

signalroute P_pZone_C_cZone_Manager_M_sIamZone(1) #fifo #reliable #unicast #urgent
from pZone
to pZoneManager
with sIamZone;

signalroute P_pZone_C_cCtrl_Zone_M_sOut_Car(1) #fifo #reliable #unicast #urgent
from pZone
to pCtrl
with sOut_Car;

signalroute P_pZone_C_cZone_Manager_M_sOkInitPid(1) #fifo #reliable #unicast #urgent
from pZone
to pZoneManager
with sOkInitPid;

signalroute P_pZone_C_cCtrl_Zone_M_sOkInitPid(1) #fifo #reliable #unicast #urgent
from pZone
to pCtrl
with sOkInitPid;

signalroute P_pZone_C_cZone_Manager_M_sOkInit(1) #fifo #reliable #unicast #urgent
from pZone
to pZoneManager
with sOkInit;

signalroute P_pZone_C_cCtrl_Zone_M_sOkInit(1) #fifo #reliable #unicast #urgent
from pZone
to pCtrl
with sOkInit;

signalroute P_pZone_C_cCtrl_Zone_M_sEntered_Car(1) #fifo #reliable #unicast #urgent
from pZone
to pCtrl
with sEntered_Car;

signalroute P_pZoneManager_C_cZone_Manager_M_sInitFreeSpot(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pZone
with sInitFreeSpot;

signalroute P_pZoneManager_C_cCreator_ZoneManager_M_sOkCreateZone(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pCreatorZoneManager
with sOkCreateZone;

signalroute P_pZoneManager_C_cCreator_ZoneManager_M_sIamZoneManager(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pCreatorZoneManager
with sIamZoneManager;

signalroute P_pZoneManager_C_cCtrl_ZoneManager_M_sIamZoneManager(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pCtrl
with sIamZoneManager;

signalroute P_pZoneManager_C_cZone_Manager_M_sReqInfo(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pZone
with sReqInfo;

signalroute P_pZoneManager_C_cZone_Manager_M_sInitTotalSpots(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pZone
with sInitTotalSpots;

signalroute P_pZoneManager_C_cCtrl_ZoneManager_M_sExcQuantityZones(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pCtrl
with sExcQuantityZones;

signalroute P_pZoneManager_C_cZone_Manager_M_sInitPidCtrl(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pZone
with sInitPidCtrl;

signalroute P_pZoneManager_C_cCtrl_ZoneManager_M_sOkCreation(1) #fifo #reliable #unicast #urgent
from pZoneManager
to pCtrl
with sOkCreation;

process pZone(0);
fpar PARENT pid;
var OFFSPRING pid;
var SENDER pid;
var RTDS_skip boolean;
var RTDS_stop boolean;
var p_freeSpots i_spots;
var p_totalSpots i_spots;
var freeSpots i_spots;
var totalSpots i_spots;
var PidZone pid;
var pid_Ctrl pid;
var pidCtrl pid;
var infoTableZone InfoZone;

state RTDS_START #start #stable ;
provided true;
task PidZone := self;
task infoTableZone.ID := PidZone;
nextstate Idle;
endstate;


state WaitSensorIR4 #stable ;

deadline delayable;
input sIR4_Zone(SENDER);
nextstate VerifyIsaCarOut;
endstate;


state WaitSensorIR2 #stable ;

deadline delayable;
input sIR2_Zone(SENDER);
nextstate VerifyIsaCarEntering;
endstate;


state Idle #stable ;

deadline delayable;
input sInitTotalSpots(SENDER, p_totalSpots);
task infoTableZone.totalSpots := p_totalSpots;
output sOkInit(self, infoTableZone) to SENDER;
nextstate Idle;

deadline delayable;
input sInitPidCtrl(SENDER, pidCtrl);
task pid_Ctrl := pidCtrl;
output sOkInitPid(self) to SENDER;
nextstate Idle;

deadline delayable;
input sInitFreeSpot(SENDER, p_freeSpots);
task infoTableZone.freeSpots := p_freeSpots;
output sOkInit(self, infoTableZone) to SENDER;
nextstate Idle;

deadline delayable;
input sIR1_Zone(SENDER);
nextstate WaitSensorIR2;

deadline delayable;
input sIR3_Zone(SENDER);
nextstate WaitSensorIR4;

deadline delayable;
input sReqInfo(SENDER);
output sInfoZone(self, infoTableZone) to SENDER;
nextstate Idle;
endstate;


state VerifyIsaCarEntering #stable ;

deadline delayable;
input sLoopInductive_Zone(SENDER);
nextstate RTDS_decision_SYMB128;
endstate;

state RTDS_decision_SYMB128 #unstable ;

provided ( not (infoTableZone.freeSpots = 0) );
task infoTableZone.freeSpots := infoTableZone.freeSpots - 1;
output sEntered_Car(self, infoTableZone) to pid_Ctrl;
nextstate Idle;

provided ( infoTableZone.freeSpots = 0 );
nextstate Idle;
endstate;


state VerifyIsaCarOut #stable ;

deadline delayable;
input sLoopInductive_Zone(SENDER);
nextstate RTDS_decision_SYMB126;
endstate;

state RTDS_decision_SYMB126 #unstable ;

provided ( not (infoTableZone.freeSpots = infoTableZone.totalSpots) );
task infoTableZone.freeSpots := infoTableZone.freeSpots + 1;
output sOut_Car(self, infoTableZone) to pid_Ctrl;
nextstate Idle;

provided ( infoTableZone.freeSpots = infoTableZone.totalSpots );
nextstate Idle;
endstate;
endprocess;


process pZoneManager(0);
fpar PARENT pid;
var OFFSPRING pid;
var SENDER pid;
var RTDS_skip boolean;
var RTDS_stop boolean;
var quantityZones integer;
var p_freeSpots i_spots;
var p_totalSpots i_spots;
var pid_Ctrl pid;
var pidCtrl pid;
var PidZone pid;
var infoTableZone InfoZone;

state RTDS_START #start #stable ;
provided true;
task quantityZones := 0;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sCreateZone(SENDER, p_totalSpots,p_freeSpots,pidCtrl);
task pid_Ctrl := pidCtrl;
nextstate RTDS_decision_SYMB5;

deadline delayable;
input sConfirmZoneManager_i(SENDER, pidCtrl);
task pid_Ctrl := pidCtrl;
task quantityZones := quantityZones + 1;
output sIamZoneManager(self, self) to SENDER;
nextstate Idle;

deadline delayable;
input sConfirmZoneManager(SENDER, pidCtrl);
task pid_Ctrl := pidCtrl;
output sIamZoneManager(self, self) to SENDER;
nextstate Idle;
endstate;

state RTDS_decision_SYMB5 #unstable ;

provided ( not (quantityZones < cMAX_ZONES) );
output sExcQuantityZones(self) to pidCtrl;
nextstate Idle;

provided ( quantityZones < cMAX_ZONES );
OFFSPRING := fork pZone(self);
task quantityZones := quantityZones + 1;
task PidZone := OFFSPRING;
output sInitPidCtrl(self, pidCtrl) to PidZone;
nextstate sWaitInitPidCtrl_Zone;
endstate;


state sWaitInitPidCtrl_Zone #stable ;

deadline delayable;
input sOkInitPid(SENDER);
output sInitFreeSpot(self, p_freeSpots) to PidZone;
nextstate sWaitAck_Ok1;
endstate;


state sWaitAck_Ok2 #stable ;

deadline delayable;
input sOkInit(SENDER, infoTableZone);
output sReqInfo(self) to PidZone;
nextstate sWaitInfoZone;
endstate;


state sWaitAck_Ok1 #stable ;

deadline delayable;
input sOkInit(SENDER, infoTableZone);
output sInitTotalSpots(self, p_totalSpots) to PidZone;
nextstate sWaitAck_Ok2;
endstate;


state sWaitInfoZone #stable ;

deadline delayable;
input sInfoZone(SENDER, infoTableZone);
output sOkCreation(self, infoTableZone) to pidCtrl;
nextstate Idle;
endstate;
endprocess;


process pCreatorZoneManager(0);
fpar PARENT pid;
var OFFSPRING pid;
var SENDER pid;
var RTDS_skip boolean;
var RTDS_stop boolean;
var pidCtrl pid;
var pidZoneManager pid;
var cantidadZoneManager integer;

state RTDS_START #start #stable ;
provided true;
task cantidadZoneManager := 0;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sCreateZoneManager(SENDER, pidCtrl);
nextstate RTDS_decision_SYMB14;
endstate;

state RTDS_decision_SYMB14 #unstable ;

provided ( not (cantidadZoneManager < cNUMMAXCTRL) );
output sExcZoneManager(self) to pidCtrl;
nextstate Idle;

provided ( cantidadZoneManager < cNUMMAXCTRL );
OFFSPRING := fork pZoneManager(self);
output sConfirmZoneManager(self, pidCtrl) to OFFSPRING;
nextstate sWaitCOnfirmZoneManager;
endstate;


state sWaitCOnfirmZoneManager #stable ;

deadline delayable;
input sIamZoneManager(SENDER, pidZoneManager);
output sOkCreateZoneManager(self, pidZoneManager) to pidCtrl;
task cantidadZoneManager := cantidadZoneManager + 1;
nextstate Idle;
endstate;
endprocess;

signal RTDS_Inparam_proc_FindIndexPIDZone(pid, pid, table_Zones, integer);
signal RTDS_Outparam_proc_FindIndexPIDZone(pid, integer);

signalroute P_pCtrl_C_cCtrl_Zone_M_sInitFreeSpot(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZone
with sInitFreeSpot;

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sExcQuantityCtrl(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sExcQuantityCtrl;
*/

signalroute P_pCtrl_C_cCtrl_CreatorZoneManager_M_sCreateZoneManager(1) #fifo #reliable #unicast #urgent
from pCtrl
to pCreatorZoneManager
with sCreateZoneManager;

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sOkCreateZone(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sOkCreateZone;
*/

signalroute P_pCtrl_C_cCtrl_CtrlManager_M_sIamCtrl(1) #fifo #reliable #unicast #urgent
from pCtrl
to pCtrlManager
with sIamCtrl;

signalroute P_pCtrl_C_cCtrl_ZoneManager_M_sCreateZone(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZoneManager
with sCreateZone;

signalroute P_pCtrl_C_cCtrl_Zone_M_sInitTotalSpots(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZone
with sInitTotalSpots;

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sOkCreationCtrl_i(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sOkCreationCtrl_i;
*/

signalroute P_pCtrl_C_cCtrl_Zone_M_sInitPidCtrl(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZone
with sInitPidCtrl;

signalroute P_pCtrl_C_cCtrl_ZoneManager_M_sConfirmZoneManager_i(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZoneManager
with sConfirmZoneManager_i;

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sOkSetUp(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sOkSetUp;
*/

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sExcZoneManager(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sExcZoneManager;
*/

signalroute P_pCtrl_C_cCtrl_Zone_M_sReqInfo(1) #fifo #reliable #unicast #urgent
from pCtrl
to pZone
with sReqInfo;

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sCannotGetInfoZones(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sCannotGetInfoZones;
*/

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sInfoTotalCtrl(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sInfoTotalCtrl;
*/

/*
signalroute P_pCtrl_C_cMain_CtrlZone_M_sExcLimitZones(1) #fifo #reliable #unicast #urgent
from pCtrl
to env
with sExcLimitZones;
*/

signalroute P_pCtrlManager_C_cCtrl_CtrlManager_M_sConfirmCtrl(1) #fifo #reliable #unicast #urgent
from pCtrlManager
to pCtrl
with sConfirmCtrl;

/*
signalroute P_pCtrlManager_C_cMain_CtrlManager_M_sExcQuantityCtrl(1) #fifo #reliable #unicast #urgent
from pCtrlManager
to env
with sExcQuantityCtrl;
*/

/*
signalroute P_pCtrlManager_C_cMain_CtrlManager_M_sOkCreationCtrl(1) #fifo #reliable #unicast #urgent
from pCtrlManager
to env
with sOkCreationCtrl;
*/

process pCtrl(0);
fpar PARENT pid;
var OFFSPRING pid;
var SENDER pid;
var RTDS_skip boolean;
var RTDS_stop boolean;
var timerWaitInfoZones clock;
var p_freeSpots i_spots;
var p_totalSpots i_spots;
var allfreeSpots i_spots;
var PidZone pid;
var pidZoneManager pid;
var pid_ZoneManager pid;
var infoTableZone InfoZone;
var indexList integer;
var index integer;
var indexPid integer;
var infoCtrlG InfoCtrl;
var assignedZoneManager boolean;
var freeSpots i_spots;
var totalSpots i_spots;
var Zone itIndex;
var tmpTblZone table_Zones;
var tmpInfoZone InfoZone;
var proc_FindIndexPIDZone_PARENT pid;
var proc_FindIndexPIDZone_OFFSPRING pid;
var proc_FindIndexPIDZone_SENDER pid;
var RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind integer;
var proc_FindIndexPIDZone_PidZone pid;
var proc_FindIndexPIDZone_tableZones table_Zones;
var proc_FindIndexPIDZone_indexList integer;
var proc_FindIndexPIDZone_index integer;
var proc_FindIndexPIDZone_PARENT pid;
var proc_FindIndexPIDZone_OFFSPRING pid;
var proc_FindIndexPIDZone_SENDER pid;
var RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind integer;
var proc_FindIndexPIDZone_PidZone pid;
var proc_FindIndexPIDZone_tableZones table_Zones;
var proc_FindIndexPIDZone_indexList integer;
var proc_FindIndexPIDZone_index integer;


state RTDS_procedure_proc_FindIndexPIDZone #stable ;
state RTDS_START_procedure_proc_FindIndexPIDZone #start #stable ;
input RTDS_Inparam_proc_FindIndexPIDZone(proc_FindIndexPIDZone_PARENT, proc_FindIndexPIDZone_PidZone, proc_FindIndexPIDZone_tableZones, proc_FindIndexPIDZone_indexList);
task proc_FindIndexPIDZone_index := 0;
nextstate RTDS_LABEL_RTDS_label1;
endstate;

state RTDS_decision_SYMB16 #unstable ;

provided ( not (proc_FindIndexPIDZone_index <= proc_FindIndexPIDZone_indexList) );
task proc_FindIndexPIDZone_index := -(1);
output RTDS_Outparam_proc_FindIndexPIDZone(self, proc_FindIndexPIDZone_index) to self;
nextstate RTDS_wait_return_procedure_proc_FindIndexPIDZone;

provided ( proc_FindIndexPIDZone_index <= proc_FindIndexPIDZone_indexList );
nextstate RTDS_decision_SYMB14;
endstate;

state RTDS_decision_SYMB14 #unstable ;

provided ( not (proc_FindIndexPIDZone_tableZones[proc_FindIndexPIDZone_index].ID = proc_FindIndexPIDZone_PidZone) );
task proc_FindIndexPIDZone_index := proc_FindIndexPIDZone_index + 1;
nextstate RTDS_end_decision_SYMB14;

provided ( proc_FindIndexPIDZone_tableZones[proc_FindIndexPIDZone_index].ID = proc_FindIndexPIDZone_PidZone );
output RTDS_Outparam_proc_FindIndexPIDZone(self, proc_FindIndexPIDZone_index) to self;
nextstate RTDS_wait_return_procedure_proc_FindIndexPIDZone;
endstate;

state RTDS_end_decision_SYMB14 #unstable ;
provided true;
nextstate RTDS_LABEL_RTDS_label1;
endstate;

state RTDS_LABEL_RTDS_label1 #unstable ;
provided true;
nextstate RTDS_decision_SYMB16;
endstate;
endstate;

state RTDS_START #start #stable ;
provided true;
task indexList := 0;
task index := 0;
task indexPid := 0;
task infoCtrlG.alltotalSpots := 0;
task infoCtrlG.allfreeSpots := 0;
task infoCtrlG.IDCtrl := self;
task assignedZoneManager := false;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sInitialConnection(SENDER);
output sConfirmZoneManager_i(self, self) via {P_pCtrl_C_cCtrl_ZoneManager_M_sConfirmZoneManager_i}0;
nextstate sWaitConfirmZoneManager;

deadline delayable;
input sCreateZone_(SENDER, p_totalSpots,p_freeSpots);
nextstate RTDS_decision_SYMB690;
endstate;

state RTDS_decision_SYMB690 #unstable ;

provided ( not (assignedZoneManager) );
output sCreateZoneManager(self, self) via {P_pCtrl_C_cCtrl_CreatorZoneManager_M_sCreateZoneManager}0;
nextstate sWaitCreationZoneManager;

provided ( assignedZoneManager );
output sCreateZone(self, p_totalSpots, p_freeSpots, self) to pidZoneManager;
nextstate sWaitAck_BZone;
endstate;


state sWaitCreationZoneManager #stable ;

deadline delayable;
input sOkCreateZoneManager(SENDER, pid_ZoneManager);
task pidZoneManager := pid_ZoneManager;
task assignedZoneManager := true;
output sCreateZone(self, p_totalSpots, p_freeSpots, self) to pidZoneManager;
nextstate sWaitAck_BZone;

deadline delayable;
input sExcZoneManager(SENDER);
output sExcZoneManager(self) /* via {P_pCtrl_C_cMain_CtrlZone_M_sExcZoneManager}0 */;
nextstate Idle;
endstate;


state sWaitConfirmInitPid #stable ;

deadline delayable;
input sOkInitPid(SENDER);
output sReqInfo(self) to SENDER;
nextstate sWaitInfoZoneZero;
endstate;


state sWaitConfirmZoneManager #stable ;

deadline delayable;
input sIamZoneManager(SENDER, pid_ZoneManager);
task assignedZoneManager := true;
task pidZoneManager := pid_ZoneManager;
output sInitPidCtrl(self, self) via {P_pCtrl_C_cCtrl_Zone_M_sInitPidCtrl}0;
nextstate sWaitConfirmInitPid;
endstate;


state sWaitInfoZoneZero #stable ;

deadline delayable;
input sInfoZone(SENDER, infoTableZone);
task infoCtrlG.listZones[indexList] := infoTableZone;
task indexList := indexList + 1;
output sOkCreationCtrl_i(self, infoCtrlG) /* via {P_pCtrl_C_cMain_CtrlZone_M_sOkCreationCtrl_i}0 */;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sOut_Car(SENDER, infoTableZone);
task PidZone := infoTableZone.ID;
output RTDS_Inparam_proc_FindIndexPIDZone(self, PidZone, infoCtrlG.listZones, indexList) to self;
task RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind := 1;
nextstate RTDS_procedure_proc_FindIndexPIDZone;
endstate;

state RTDS_wait_return_procedure_proc_FindIndexPIDZone_1 #stable ;
input RTDS_Outparam_proc_FindIndexPIDZone(proc_FindIndexPIDZone_SENDER,index);
task infoCtrlG.listZones[index] := infoTableZone;
nextstate Idle;

deadline delayable;
input sEntered_Car(SENDER, infoTableZone);
task PidZone := infoTableZone.ID;
output RTDS_Inparam_proc_FindIndexPIDZone(self, PidZone, infoCtrlG.listZones, indexList) to self;
task RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind := 2;
nextstate RTDS_procedure_proc_FindIndexPIDZone;
endstate;

state RTDS_wait_return_procedure_proc_FindIndexPIDZone_2 #stable ;
input RTDS_Outparam_proc_FindIndexPIDZone(proc_FindIndexPIDZone_SENDER,index);
task infoCtrlG.listZones[index] := infoTableZone;
nextstate Idle;

deadline delayable;
input sReqInfoCtrl(SENDER);
task index := 0;
task infoCtrlG.allfreeSpots := 0;
task infoCtrlG.alltotalSpots := 0;
nextstate RTDS_LABEL_RTDS_label1;
endstate;

state RTDS_decision_SYMB1494 #unstable ;

provided ( not (index < indexList) );
task index := 0;
set timerWaitInfoZones := -(20);
nextstate sWaitInfoZone;

provided ( index < indexList );
task tmpTblZone := infoCtrlG.listZones;
task tmpInfoZone := tmpTblZone[index];
task PidZone := tmpInfoZone.ID;
task infoCtrlG.tableConnectionOkZones[index] := false;
task index := index + 1;
output sReqInfo(self) to PidZone;
nextstate RTDS_end_decision_SYMB1494;
endstate;


state sWaitOkInit #stable ;

deadline delayable;
input sOkInit(SENDER, infoTableZone);
task infoCtrlG.listZones[Zone] := infoTableZone;
output sOkSetUp(self) /* via {P_pCtrl_C_cMain_CtrlZone_M_sOkSetUp}0 */;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sInitFreeSpotZone(SENDER, Zone,freeSpots);
task tmpTblZone := infoCtrlG.listZones;
task tmpInfoZone := tmpTblZone[index];
task PidZone := tmpInfoZone.ID;
output sInitFreeSpot(self, freeSpots) to PidZone;
nextstate sWaitOkInit;

deadline delayable;
input sConfirmCtrl(SENDER);
output sIamCtrl(self, infoCtrlG) to SENDER;
nextstate Idle;

deadline delayable;
input sInitTotalSpotZone(SENDER, Zone,totalSpots);
task tmpTblZone := infoCtrlG.listZones;
task tmpInfoZone := tmpTblZone[index];
task PidZone := tmpInfoZone.ID;
output sInitTotalSpots(self, totalSpots) to PidZone;
nextstate sWaitOkInit;
endstate;


state sWaitAck_BZone #stable ;

deadline delayable;
input sExcQuantityZones(SENDER);
output sExcLimitZones(self) /* via {P_pCtrl_C_cMain_CtrlZone_M_sExcLimitZones}0 */;
nextstate Idle;

deadline delayable;
input sOkCreation(SENDER, infoTableZone);
task infoCtrlG.listZones[indexList] := infoTableZone;
task indexList := indexList + 1;
output sOkCreateZone(self, infoCtrlG) /* via {P_pCtrl_C_cMain_CtrlZone_M_sOkCreateZone}0 */;
nextstate Idle;
endstate;


state sWaitInfoZone #stable ;

when timerWaitInfoZones = 0;
reset timerWaitInfoZones;
output sInfoTotalCtrl(self, infoCtrlG) /* via {P_pCtrl_C_cMain_CtrlZone_M_sInfoTotalCtrl}0 */;
nextstate Idle;

deadline delayable;
input sInfoZone(SENDER, infoTableZone);
reset timerWaitInfoZones;
task PidZone := infoTableZone.ID;
output RTDS_Inparam_proc_FindIndexPIDZone(self, PidZone, infoCtrlG.listZones, indexList) to self;
task RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind := 3;
nextstate RTDS_procedure_proc_FindIndexPIDZone;
endstate;

state RTDS_wait_return_procedure_proc_FindIndexPIDZone_3 #stable ;
input RTDS_Outparam_proc_FindIndexPIDZone(proc_FindIndexPIDZone_SENDER,indexPid);
task infoCtrlG.listZones[indexPid] := infoTableZone;
task infoCtrlG.allfreeSpots := infoCtrlG.allfreeSpots + infoTableZone.freeSpots;
task infoCtrlG.alltotalSpots := infoCtrlG.alltotalSpots + infoTableZone.totalSpots;
task infoCtrlG.tableConnectionOkZones[indexPid] := true;
task index := index + 1;
set timerWaitInfoZones := -(20);
nextstate RTDS_decision_SYMB72;
endstate;

state RTDS_decision_SYMB72 #unstable ;

provided ( not (index < indexList) );
reset timerWaitInfoZones;
output sInfoTotalCtrl(self, infoCtrlG) via {P_pCtrl_C_Main_CtrlZone_M_sInfoTotalCtrl}0;
nextstate Idle;

provided ( index < indexList );
nextstate sWaitInfoZone;
endstate;

state RTDS_end_decision_SYMB1494 #unstable ;
provided true;
nextstate RTDS_LABEL_RTDS_label1;
endstate;

state RTDS_LABEL_RTDS_label1 #unstable ;
provided true;
nextstate RTDS_decision_SYMB1494;
endstate;

state RTDS_wait_return_procedure_proc_FindIndexPIDZone #unstable ;
provided RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind = 3;
nextstate RTDS_wait_return_procedure_proc_FindIndexPIDZone_3;
provided RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind = 2;
nextstate RTDS_wait_return_procedure_proc_FindIndexPIDZone_2;
provided RTDS_wait_return_procedure_proc_FindIndexPIDZone_ind = 1;
nextstate RTDS_wait_return_procedure_proc_FindIndexPIDZone_1;
endstate;
endprocess;


process pCtrlManager(0);
fpar PARENT pid;
var OFFSPRING pid;
var SENDER pid;
var RTDS_skip boolean;
var RTDS_stop boolean;
var QuantityCtrl integer;
var QuantityCtrlManager integer;
var infoCtrlGral InfoCtrl;
var pidCtrlManager pid;

state RTDS_START #start #stable ;
provided true;
task QuantityCtrl := 1;
nextstate Idle;
endstate;


state sWaitAckCtrl #stable ;

deadline delayable;
input sIamCtrl(SENDER, infoCtrlGral);
output sOkCreationCtrl(self, infoCtrlGral) /* via {P_pCtrlManager_C_cMain_CtrlManager_M_sOkCreationCtrl}0 */;
nextstate Idle;
endstate;


state Idle #stable ;

deadline delayable;
input sCreateCtrl(SENDER);
nextstate RTDS_decision_SYMB8;
endstate;

state RTDS_decision_SYMB8 #unstable ;

provided ( not (QuantityCtrl < cNUMMAXCTRL) );
output sExcQuantityCtrl(self) /* via {P_pCtrlManager_C_cMain_CtrlManager_M_sExcQuantityCtrl}0 */;
nextstate Idle;

provided ( QuantityCtrl < cNUMMAXCTRL );
OFFSPRING := fork pCtrl(self);
task QuantityCtrl := QuantityCtrl + 1;
output sConfirmCtrl(self) to OFFSPRING;
nextstate sWaitAckCtrl;
endstate;
endprocess;


process RTDS_start_process(1);
state RTDS_START #start ;
provided true;
fork pCtrlManager(nil);
fork pZoneManager(nil);
fork pCreatorZoneManager(nil);
fork pCtrl(nil);
fork pZone(nil);
kill self;
stop;
endstate;
endprocess;

endsystem;


cut observer obsEntryCar;
var next integer:=0;
var pidSender pid;
var PidZone pid;
var infZone InfoZone;
type InfoZone = record
  totalSpots integer;
  freeSpots integer;
  ID pid;
endrecord;
state RTDS_START #start #stable ;
provided true;
nextstate init;
endstate;


state s_error
#error ;
provided true;
cut;
nextstate DEAD;
endstate;


state init ;
match input sLoopInductive_Zone(pidSender) in PidZone;
nextstate RTDS_decision_SYMB47;
match input sIR1_Zone(pidSender) in PidZone;
nextstate RTDS_decision_SYMB10;
match output sEntered_Car(pidSender,infZone) from PidZone;
nextstate RTDS_decision_SYMB55;
match input sIR2_Zone(pidSender) in PidZone;
nextstate RTDS_decision_SYMB25;
endstate;

state RTDS_decision_SYMB47 #unstable ;

provided not (next=2);
task next:=2;
nextstate init;

provided next=2;
task next:=3;
nextstate init;
endstate;

state RTDS_decision_SYMB10 #unstable ;

provided not (({pZone}0) instate Idle);
task next:=0;
nextstate init;

provided ({pZone}0) instate Idle;
task next:=1;
nextstate init;
endstate;

state RTDS_decision_SYMB55 #unstable ;

provided not (next=3);
nextstate s_error;

provided next=3;
nextstate end;
endstate;

state RTDS_decision_SYMB25 #unstable ;

provided not (next=1);
task next:=1;
nextstate init;

provided next=1;
task next:=2;
nextstate init;
endstate;


state end ;
provided true;
cut;
nextstate DEAD;
endstate;


state DEAD ;
endstate;
endobserver;

